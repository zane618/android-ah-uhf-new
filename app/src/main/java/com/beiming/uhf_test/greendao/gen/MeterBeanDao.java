package com.beiming.uhf_test.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beiming.uhf_test.bean.MeterBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "METER_BEAN".
*/
public class MeterBeanDao extends AbstractDao<MeterBean, Long> {

    public static final String TABLENAME = "METER_BEAN";

    /**
     * Properties of entity MeterBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MeterId = new Property(0, Long.class, "meterId", true, "_id");
        public final static Property BarCode = new Property(1, String.class, "barCode", false, "BAR_CODE");
        public final static Property MeterAssetNo = new Property(2, String.class, "meterAssetNo", false, "METER_ASSET_NO");
        public final static Property MeasAssetNo = new Property(3, String.class, "measAssetNo", false, "MEAS_ASSET_NO");
        public final static Property MeasBarCode = new Property(4, String.class, "measBarCode", false, "MEAS_BAR_CODE");
        public final static Property ScanTime = new Property(5, String.class, "scanTime", false, "SCAN_TIME");
        public final static Property Gps_X = new Property(6, String.class, "gps_X", false, "GPS__X");
        public final static Property Gps_Y = new Property(7, String.class, "gps_Y", false, "GPS__Y");
        public final static Property Gps_Z = new Property(8, String.class, "gps_Z", false, "GPS__Z");
        public final static Property GpsLatitude = new Property(9, String.class, "gpsLatitude", false, "GPS_LATITUDE");
        public final static Property GpsLongitude = new Property(10, String.class, "gpsLongitude", false, "GPS_LONGITUDE");
        public final static Property IsExsit = new Property(11, boolean.class, "isExsit", false, "IS_EXSIT");
    }


    public MeterBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MeterBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"METER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: meterId
                "\"BAR_CODE\" TEXT," + // 1: barCode
                "\"METER_ASSET_NO\" TEXT," + // 2: meterAssetNo
                "\"MEAS_ASSET_NO\" TEXT," + // 3: measAssetNo
                "\"MEAS_BAR_CODE\" TEXT," + // 4: measBarCode
                "\"SCAN_TIME\" TEXT," + // 5: scanTime
                "\"GPS__X\" TEXT," + // 6: gps_X
                "\"GPS__Y\" TEXT," + // 7: gps_Y
                "\"GPS__Z\" TEXT," + // 8: gps_Z
                "\"GPS_LATITUDE\" TEXT," + // 9: gpsLatitude
                "\"GPS_LONGITUDE\" TEXT," + // 10: gpsLongitude
                "\"IS_EXSIT\" INTEGER NOT NULL );"); // 11: isExsit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"METER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MeterBean entity) {
        stmt.clearBindings();
 
        Long meterId = entity.getMeterId();
        if (meterId != null) {
            stmt.bindLong(1, meterId);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(2, barCode);
        }
 
        String meterAssetNo = entity.getMeterAssetNo();
        if (meterAssetNo != null) {
            stmt.bindString(3, meterAssetNo);
        }
 
        String measAssetNo = entity.getMeasAssetNo();
        if (measAssetNo != null) {
            stmt.bindString(4, measAssetNo);
        }
 
        String measBarCode = entity.getMeasBarCode();
        if (measBarCode != null) {
            stmt.bindString(5, measBarCode);
        }
 
        String scanTime = entity.getScanTime();
        if (scanTime != null) {
            stmt.bindString(6, scanTime);
        }
 
        String gps_X = entity.getGps_X();
        if (gps_X != null) {
            stmt.bindString(7, gps_X);
        }
 
        String gps_Y = entity.getGps_Y();
        if (gps_Y != null) {
            stmt.bindString(8, gps_Y);
        }
 
        String gps_Z = entity.getGps_Z();
        if (gps_Z != null) {
            stmt.bindString(9, gps_Z);
        }
 
        String gpsLatitude = entity.getGpsLatitude();
        if (gpsLatitude != null) {
            stmt.bindString(10, gpsLatitude);
        }
 
        String gpsLongitude = entity.getGpsLongitude();
        if (gpsLongitude != null) {
            stmt.bindString(11, gpsLongitude);
        }
        stmt.bindLong(12, entity.getIsExsit() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MeterBean entity) {
        stmt.clearBindings();
 
        Long meterId = entity.getMeterId();
        if (meterId != null) {
            stmt.bindLong(1, meterId);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(2, barCode);
        }
 
        String meterAssetNo = entity.getMeterAssetNo();
        if (meterAssetNo != null) {
            stmt.bindString(3, meterAssetNo);
        }
 
        String measAssetNo = entity.getMeasAssetNo();
        if (measAssetNo != null) {
            stmt.bindString(4, measAssetNo);
        }
 
        String measBarCode = entity.getMeasBarCode();
        if (measBarCode != null) {
            stmt.bindString(5, measBarCode);
        }
 
        String scanTime = entity.getScanTime();
        if (scanTime != null) {
            stmt.bindString(6, scanTime);
        }
 
        String gps_X = entity.getGps_X();
        if (gps_X != null) {
            stmt.bindString(7, gps_X);
        }
 
        String gps_Y = entity.getGps_Y();
        if (gps_Y != null) {
            stmt.bindString(8, gps_Y);
        }
 
        String gps_Z = entity.getGps_Z();
        if (gps_Z != null) {
            stmt.bindString(9, gps_Z);
        }
 
        String gpsLatitude = entity.getGpsLatitude();
        if (gpsLatitude != null) {
            stmt.bindString(10, gpsLatitude);
        }
 
        String gpsLongitude = entity.getGpsLongitude();
        if (gpsLongitude != null) {
            stmt.bindString(11, gpsLongitude);
        }
        stmt.bindLong(12, entity.getIsExsit() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MeterBean readEntity(Cursor cursor, int offset) {
        MeterBean entity = new MeterBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // meterId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // barCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // meterAssetNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // measAssetNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // measBarCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // scanTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // gps_X
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // gps_Y
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // gps_Z
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // gpsLatitude
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // gpsLongitude
            cursor.getShort(offset + 11) != 0 // isExsit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MeterBean entity, int offset) {
        entity.setMeterId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBarCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMeterAssetNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMeasAssetNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMeasBarCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setScanTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGps_X(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGps_Y(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGps_Z(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGpsLatitude(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGpsLongitude(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsExsit(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MeterBean entity, long rowId) {
        entity.setMeterId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MeterBean entity) {
        if(entity != null) {
            return entity.getMeterId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MeterBean entity) {
        return entity.getMeterId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
