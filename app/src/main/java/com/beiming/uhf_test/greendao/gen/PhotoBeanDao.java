package com.beiming.uhf_test.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beiming.uhf_test.bean.pic.PhotoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHOTO_BEAN".
*/
public class PhotoBeanDao extends AbstractDao<PhotoBean, Long> {

    public static final String TABLENAME = "PHOTO_BEAN";

    /**
     * Properties of entity PhotoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PhotoBeanId = new Property(0, Long.class, "photoBeanId", true, "_id");
        public final static Property MeasAssetBarCode = new Property(1, String.class, "measAssetBarCode", false, "MEAS_ASSET_BAR_CODE");
        public final static Property CreateTime = new Property(2, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Describe = new Property(3, String.class, "describe", false, "DESCRIBE");
        public final static Property ImageSrc = new Property(4, String.class, "imageSrc", false, "IMAGE_SRC");
        public final static Property PicName = new Property(5, String.class, "picName", false, "PIC_NAME");
        public final static Property Add = new Property(6, String.class, "add", false, "ADD");
        public final static Property Type = new Property(7, int.class, "type", false, "TYPE");
    }


    public PhotoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PhotoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHOTO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: photoBeanId
                "\"MEAS_ASSET_BAR_CODE\" TEXT," + // 1: measAssetBarCode
                "\"CREATE_TIME\" TEXT," + // 2: createTime
                "\"DESCRIBE\" TEXT," + // 3: describe
                "\"IMAGE_SRC\" TEXT," + // 4: imageSrc
                "\"PIC_NAME\" TEXT," + // 5: picName
                "\"ADD\" TEXT," + // 6: add
                "\"TYPE\" INTEGER NOT NULL );"); // 7: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHOTO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhotoBean entity) {
        stmt.clearBindings();
 
        Long photoBeanId = entity.getPhotoBeanId();
        if (photoBeanId != null) {
            stmt.bindLong(1, photoBeanId);
        }
 
        String measAssetBarCode = entity.getMeasAssetBarCode();
        if (measAssetBarCode != null) {
            stmt.bindString(2, measAssetBarCode);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(3, createTime);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(4, describe);
        }
 
        String imageSrc = entity.getImageSrc();
        if (imageSrc != null) {
            stmt.bindString(5, imageSrc);
        }
 
        String picName = entity.getPicName();
        if (picName != null) {
            stmt.bindString(6, picName);
        }
 
        String add = entity.getAdd();
        if (add != null) {
            stmt.bindString(7, add);
        }
        stmt.bindLong(8, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhotoBean entity) {
        stmt.clearBindings();
 
        Long photoBeanId = entity.getPhotoBeanId();
        if (photoBeanId != null) {
            stmt.bindLong(1, photoBeanId);
        }
 
        String measAssetBarCode = entity.getMeasAssetBarCode();
        if (measAssetBarCode != null) {
            stmt.bindString(2, measAssetBarCode);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(3, createTime);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(4, describe);
        }
 
        String imageSrc = entity.getImageSrc();
        if (imageSrc != null) {
            stmt.bindString(5, imageSrc);
        }
 
        String picName = entity.getPicName();
        if (picName != null) {
            stmt.bindString(6, picName);
        }
 
        String add = entity.getAdd();
        if (add != null) {
            stmt.bindString(7, add);
        }
        stmt.bindLong(8, entity.getType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PhotoBean readEntity(Cursor cursor, int offset) {
        PhotoBean entity = new PhotoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // photoBeanId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // measAssetBarCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // describe
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imageSrc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // picName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // add
            cursor.getInt(offset + 7) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhotoBean entity, int offset) {
        entity.setPhotoBeanId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMeasAssetBarCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescribe(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageSrc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPicName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAdd(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PhotoBean entity, long rowId) {
        entity.setPhotoBeanId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PhotoBean entity) {
        if(entity != null) {
            return entity.getPhotoBeanId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PhotoBean entity) {
        return entity.getPhotoBeanId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
