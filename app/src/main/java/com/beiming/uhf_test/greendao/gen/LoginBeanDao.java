package com.beiming.uhf_test.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beiming.uhf_test.bean.LoginBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_BEAN".
*/
public class LoginBeanDao extends AbstractDao<LoginBean, Long> {

    public static final String TABLENAME = "LOGIN_BEAN";

    /**
     * Properties of entity LoginBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LoginNumber = new Property(0, Long.class, "loginNumber", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property IsEnable = new Property(3, String.class, "isEnable", false, "IS_ENABLE");
        public final static Property CreatTime = new Property(4, String.class, "creatTime", false, "CREAT_TIME");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property AvailableTimeType = new Property(6, String.class, "availableTimeType", false, "AVAILABLE_TIME_TYPE");
        public final static Property AvailableTime = new Property(7, String.class, "availableTime", false, "AVAILABLE_TIME");
        public final static Property StartEffectiveTime = new Property(8, String.class, "startEffectiveTime", false, "START_EFFECTIVE_TIME");
        public final static Property ProjectTeam = new Property(9, String.class, "projectTeam", false, "PROJECT_TEAM");
        public final static Property AnswerOne = new Property(10, String.class, "answerOne", false, "ANSWER_ONE");
        public final static Property AnswerTwo = new Property(11, String.class, "answerTwo", false, "ANSWER_TWO");
        public final static Property AnswerThree = new Property(12, String.class, "answerThree", false, "ANSWER_THREE");
    }


    public LoginBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LoginBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: loginNumber
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"PASSWORD\" TEXT," + // 2: password
                "\"IS_ENABLE\" TEXT," + // 3: isEnable
                "\"CREAT_TIME\" TEXT," + // 4: creatTime
                "\"TYPE\" TEXT," + // 5: type
                "\"AVAILABLE_TIME_TYPE\" TEXT," + // 6: availableTimeType
                "\"AVAILABLE_TIME\" TEXT," + // 7: availableTime
                "\"START_EFFECTIVE_TIME\" TEXT," + // 8: startEffectiveTime
                "\"PROJECT_TEAM\" TEXT," + // 9: projectTeam
                "\"ANSWER_ONE\" TEXT," + // 10: answerOne
                "\"ANSWER_TWO\" TEXT," + // 11: answerTwo
                "\"ANSWER_THREE\" TEXT);"); // 12: answerThree
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginBean entity) {
        stmt.clearBindings();
 
        Long loginNumber = entity.getLoginNumber();
        if (loginNumber != null) {
            stmt.bindLong(1, loginNumber);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String isEnable = entity.getIsEnable();
        if (isEnable != null) {
            stmt.bindString(4, isEnable);
        }
 
        String creatTime = entity.getCreatTime();
        if (creatTime != null) {
            stmt.bindString(5, creatTime);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String availableTimeType = entity.getAvailableTimeType();
        if (availableTimeType != null) {
            stmt.bindString(7, availableTimeType);
        }
 
        String availableTime = entity.getAvailableTime();
        if (availableTime != null) {
            stmt.bindString(8, availableTime);
        }
 
        String startEffectiveTime = entity.getStartEffectiveTime();
        if (startEffectiveTime != null) {
            stmt.bindString(9, startEffectiveTime);
        }
 
        String projectTeam = entity.getProjectTeam();
        if (projectTeam != null) {
            stmt.bindString(10, projectTeam);
        }
 
        String answerOne = entity.getAnswerOne();
        if (answerOne != null) {
            stmt.bindString(11, answerOne);
        }
 
        String answerTwo = entity.getAnswerTwo();
        if (answerTwo != null) {
            stmt.bindString(12, answerTwo);
        }
 
        String answerThree = entity.getAnswerThree();
        if (answerThree != null) {
            stmt.bindString(13, answerThree);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginBean entity) {
        stmt.clearBindings();
 
        Long loginNumber = entity.getLoginNumber();
        if (loginNumber != null) {
            stmt.bindLong(1, loginNumber);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String isEnable = entity.getIsEnable();
        if (isEnable != null) {
            stmt.bindString(4, isEnable);
        }
 
        String creatTime = entity.getCreatTime();
        if (creatTime != null) {
            stmt.bindString(5, creatTime);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String availableTimeType = entity.getAvailableTimeType();
        if (availableTimeType != null) {
            stmt.bindString(7, availableTimeType);
        }
 
        String availableTime = entity.getAvailableTime();
        if (availableTime != null) {
            stmt.bindString(8, availableTime);
        }
 
        String startEffectiveTime = entity.getStartEffectiveTime();
        if (startEffectiveTime != null) {
            stmt.bindString(9, startEffectiveTime);
        }
 
        String projectTeam = entity.getProjectTeam();
        if (projectTeam != null) {
            stmt.bindString(10, projectTeam);
        }
 
        String answerOne = entity.getAnswerOne();
        if (answerOne != null) {
            stmt.bindString(11, answerOne);
        }
 
        String answerTwo = entity.getAnswerTwo();
        if (answerTwo != null) {
            stmt.bindString(12, answerTwo);
        }
 
        String answerThree = entity.getAnswerThree();
        if (answerThree != null) {
            stmt.bindString(13, answerThree);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LoginBean readEntity(Cursor cursor, int offset) {
        LoginBean entity = new LoginBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // loginNumber
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // isEnable
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // creatTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // availableTimeType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // availableTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // startEffectiveTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // projectTeam
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // answerOne
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // answerTwo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // answerThree
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginBean entity, int offset) {
        entity.setLoginNumber(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsEnable(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreatTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAvailableTimeType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAvailableTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStartEffectiveTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProjectTeam(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAnswerOne(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAnswerTwo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAnswerThree(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginBean entity, long rowId) {
        entity.setLoginNumber(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginBean entity) {
        if(entity != null) {
            return entity.getLoginNumber();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginBean entity) {
        return entity.getLoginNumber() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
