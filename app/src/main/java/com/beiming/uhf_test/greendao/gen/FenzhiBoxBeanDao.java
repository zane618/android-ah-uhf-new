package com.beiming.uhf_test.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beiming.uhf_test.utils.GreenDaoUtil.StringConverter;
import java.util.List;

import com.beiming.uhf_test.bean.FenzhiBoxBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FENZHI_BOX_BEAN".
*/
public class FenzhiBoxBeanDao extends AbstractDao<FenzhiBoxBean, Long> {

    public static final String TABLENAME = "FENZHI_BOX_BEAN";

    /**
     * Properties of entity FenzhiBoxBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FenzhiId = new Property(0, Long.class, "FenzhiId", true, "_id");
        public final static Property BarCode = new Property(1, String.class, "barCode", false, "BAR_CODE");
        public final static Property AssetNo = new Property(2, String.class, "assetNo", false, "ASSET_NO");
        public final static Property ScanTime = new Property(3, String.class, "scanTime", false, "SCAN_TIME");
        public final static Property Ts = new Property(4, long.class, "ts", false, "TS");
        public final static Property Gps_X = new Property(5, String.class, "gps_X", false, "GPS__X");
        public final static Property Gps_Y = new Property(6, String.class, "gps_Y", false, "GPS__Y");
        public final static Property Gps_Z = new Property(7, String.class, "gps_Z", false, "GPS__Z");
        public final static Property InstAddr = new Property(8, String.class, "instAddr", false, "INST_ADDR");
        public final static Property Note = new Property(9, String.class, "note", false, "NOTE");
        public final static Property MeasboxBars = new Property(10, String.class, "measboxBars", false, "MEASBOX_BARS");
        public final static Property Exsit = new Property(11, boolean.class, "exsit", false, "EXSIT");
    }

    private final StringConverter measboxBarsConverter = new StringConverter();

    public FenzhiBoxBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FenzhiBoxBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FENZHI_BOX_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: FenzhiId
                "\"BAR_CODE\" TEXT," + // 1: barCode
                "\"ASSET_NO\" TEXT," + // 2: assetNo
                "\"SCAN_TIME\" TEXT," + // 3: scanTime
                "\"TS\" INTEGER NOT NULL ," + // 4: ts
                "\"GPS__X\" TEXT," + // 5: gps_X
                "\"GPS__Y\" TEXT," + // 6: gps_Y
                "\"GPS__Z\" TEXT," + // 7: gps_Z
                "\"INST_ADDR\" TEXT," + // 8: instAddr
                "\"NOTE\" TEXT," + // 9: note
                "\"MEASBOX_BARS\" TEXT," + // 10: measboxBars
                "\"EXSIT\" INTEGER NOT NULL );"); // 11: exsit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FENZHI_BOX_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FenzhiBoxBean entity) {
        stmt.clearBindings();
 
        Long FenzhiId = entity.getFenzhiId();
        if (FenzhiId != null) {
            stmt.bindLong(1, FenzhiId);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(2, barCode);
        }
 
        String assetNo = entity.getAssetNo();
        if (assetNo != null) {
            stmt.bindString(3, assetNo);
        }
 
        String scanTime = entity.getScanTime();
        if (scanTime != null) {
            stmt.bindString(4, scanTime);
        }
        stmt.bindLong(5, entity.getTs());
 
        String gps_X = entity.getGps_X();
        if (gps_X != null) {
            stmt.bindString(6, gps_X);
        }
 
        String gps_Y = entity.getGps_Y();
        if (gps_Y != null) {
            stmt.bindString(7, gps_Y);
        }
 
        String gps_Z = entity.getGps_Z();
        if (gps_Z != null) {
            stmt.bindString(8, gps_Z);
        }
 
        String instAddr = entity.getInstAddr();
        if (instAddr != null) {
            stmt.bindString(9, instAddr);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(10, note);
        }
 
        List measboxBars = entity.getMeasboxBars();
        if (measboxBars != null) {
            stmt.bindString(11, measboxBarsConverter.convertToDatabaseValue(measboxBars));
        }
        stmt.bindLong(12, entity.getExsit() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FenzhiBoxBean entity) {
        stmt.clearBindings();
 
        Long FenzhiId = entity.getFenzhiId();
        if (FenzhiId != null) {
            stmt.bindLong(1, FenzhiId);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(2, barCode);
        }
 
        String assetNo = entity.getAssetNo();
        if (assetNo != null) {
            stmt.bindString(3, assetNo);
        }
 
        String scanTime = entity.getScanTime();
        if (scanTime != null) {
            stmt.bindString(4, scanTime);
        }
        stmt.bindLong(5, entity.getTs());
 
        String gps_X = entity.getGps_X();
        if (gps_X != null) {
            stmt.bindString(6, gps_X);
        }
 
        String gps_Y = entity.getGps_Y();
        if (gps_Y != null) {
            stmt.bindString(7, gps_Y);
        }
 
        String gps_Z = entity.getGps_Z();
        if (gps_Z != null) {
            stmt.bindString(8, gps_Z);
        }
 
        String instAddr = entity.getInstAddr();
        if (instAddr != null) {
            stmt.bindString(9, instAddr);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(10, note);
        }
 
        List measboxBars = entity.getMeasboxBars();
        if (measboxBars != null) {
            stmt.bindString(11, measboxBarsConverter.convertToDatabaseValue(measboxBars));
        }
        stmt.bindLong(12, entity.getExsit() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FenzhiBoxBean readEntity(Cursor cursor, int offset) {
        FenzhiBoxBean entity = new FenzhiBoxBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // FenzhiId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // barCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // assetNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // scanTime
            cursor.getLong(offset + 4), // ts
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gps_X
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // gps_Y
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // gps_Z
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // instAddr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // note
            cursor.isNull(offset + 10) ? null : measboxBarsConverter.convertToEntityProperty(cursor.getString(offset + 10)), // measboxBars
            cursor.getShort(offset + 11) != 0 // exsit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FenzhiBoxBean entity, int offset) {
        entity.setFenzhiId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBarCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAssetNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setScanTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTs(cursor.getLong(offset + 4));
        entity.setGps_X(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGps_Y(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGps_Z(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setInstAddr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNote(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMeasboxBars(cursor.isNull(offset + 10) ? null : measboxBarsConverter.convertToEntityProperty(cursor.getString(offset + 10)));
        entity.setExsit(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FenzhiBoxBean entity, long rowId) {
        entity.setFenzhiId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FenzhiBoxBean entity) {
        if(entity != null) {
            return entity.getFenzhiId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FenzhiBoxBean entity) {
        return entity.getFenzhiId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
