package com.beiming.uhf_test.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beiming.uhf_test.bean.FileBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_BEAN".
*/
public class FileBeanDao extends AbstractDao<FileBean, Long> {

    public static final String TABLENAME = "FILE_BEAN";

    /**
     * Properties of entity FileBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FileId = new Property(0, Long.class, "fileId", true, "_id");
        public final static Property FileType = new Property(1, String.class, "fileType", false, "FILE_TYPE");
        public final static Property UploadFileType = new Property(2, String.class, "uploadFileType", false, "UPLOAD_FILE_TYPE");
        public final static Property FileName = new Property(3, String.class, "fileName", false, "FILE_NAME");
        public final static Property Res = new Property(4, String.class, "res", false, "RES");
        public final static Property CreateTime = new Property(5, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Device_id = new Property(6, String.class, "device_id", false, "DEVICE_ID");
    }


    public FileBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FileBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: fileId
                "\"FILE_TYPE\" TEXT," + // 1: fileType
                "\"UPLOAD_FILE_TYPE\" TEXT," + // 2: uploadFileType
                "\"FILE_NAME\" TEXT," + // 3: fileName
                "\"RES\" TEXT," + // 4: res
                "\"CREATE_TIME\" TEXT," + // 5: createTime
                "\"DEVICE_ID\" TEXT);"); // 6: device_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileBean entity) {
        stmt.clearBindings();
 
        Long fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindLong(1, fileId);
        }
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(2, fileType);
        }
 
        String uploadFileType = entity.getUploadFileType();
        if (uploadFileType != null) {
            stmt.bindString(3, uploadFileType);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
 
        String res = entity.getRes();
        if (res != null) {
            stmt.bindString(5, res);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(6, createTime);
        }
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(7, device_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileBean entity) {
        stmt.clearBindings();
 
        Long fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindLong(1, fileId);
        }
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(2, fileType);
        }
 
        String uploadFileType = entity.getUploadFileType();
        if (uploadFileType != null) {
            stmt.bindString(3, uploadFileType);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
 
        String res = entity.getRes();
        if (res != null) {
            stmt.bindString(5, res);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(6, createTime);
        }
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(7, device_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FileBean readEntity(Cursor cursor, int offset) {
        FileBean entity = new FileBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // fileId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fileType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uploadFileType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // res
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // device_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileBean entity, int offset) {
        entity.setFileId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFileType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUploadFileType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRes(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDevice_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileBean entity, long rowId) {
        entity.setFileId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileBean entity) {
        if(entity != null) {
            return entity.getFileId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileBean entity) {
        return entity.getFileId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
