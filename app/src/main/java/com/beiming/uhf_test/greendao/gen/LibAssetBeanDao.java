package com.beiming.uhf_test.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.beiming.uhf_test.bean.LibAssetBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIB_ASSET_BEAN".
*/
public class LibAssetBeanDao extends AbstractDao<LibAssetBean, Long> {

    public static final String TABLENAME = "LIB_ASSET_BEAN";

    /**
     * Properties of entity LibAssetBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AssetId = new Property(0, Long.class, "assetId", true, "_id");
        public final static Property Danwei = new Property(1, String.class, "danwei", false, "DANWEI");
        public final static Property DanweiCode = new Property(2, String.class, "danweiCode", false, "DANWEI_CODE");
        public final static Property Kufang = new Property(3, String.class, "kufang", false, "KUFANG");
        public final static Property KufangCode = new Property(4, String.class, "kufangCode", false, "KUFANG_CODE");
        public final static Property Kuqu = new Property(5, String.class, "kuqu", false, "KUQU");
        public final static Property KuquCode = new Property(6, String.class, "kuquCode", false, "KUQU_CODE");
        public final static Property BarCode = new Property(7, String.class, "barCode", false, "BAR_CODE");
        public final static Property AssetNo = new Property(8, String.class, "assetNo", false, "ASSET_NO");
        public final static Property State = new Property(9, String.class, "state", false, "STATE");
        public final static Property StateCode = new Property(10, String.class, "stateCode", false, "STATE_CODE");
        public final static Property Exsit = new Property(11, boolean.class, "exsit", false, "EXSIT");
    }


    public LibAssetBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LibAssetBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIB_ASSET_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: assetId
                "\"DANWEI\" TEXT," + // 1: danwei
                "\"DANWEI_CODE\" TEXT," + // 2: danweiCode
                "\"KUFANG\" TEXT," + // 3: kufang
                "\"KUFANG_CODE\" TEXT," + // 4: kufangCode
                "\"KUQU\" TEXT," + // 5: kuqu
                "\"KUQU_CODE\" TEXT," + // 6: kuquCode
                "\"BAR_CODE\" TEXT," + // 7: barCode
                "\"ASSET_NO\" TEXT," + // 8: assetNo
                "\"STATE\" TEXT," + // 9: state
                "\"STATE_CODE\" TEXT," + // 10: stateCode
                "\"EXSIT\" INTEGER NOT NULL );"); // 11: exsit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIB_ASSET_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LibAssetBean entity) {
        stmt.clearBindings();
 
        Long assetId = entity.getAssetId();
        if (assetId != null) {
            stmt.bindLong(1, assetId);
        }
 
        String danwei = entity.getDanwei();
        if (danwei != null) {
            stmt.bindString(2, danwei);
        }
 
        String danweiCode = entity.getDanweiCode();
        if (danweiCode != null) {
            stmt.bindString(3, danweiCode);
        }
 
        String kufang = entity.getKufang();
        if (kufang != null) {
            stmt.bindString(4, kufang);
        }
 
        String kufangCode = entity.getKufangCode();
        if (kufangCode != null) {
            stmt.bindString(5, kufangCode);
        }
 
        String kuqu = entity.getKuqu();
        if (kuqu != null) {
            stmt.bindString(6, kuqu);
        }
 
        String kuquCode = entity.getKuquCode();
        if (kuquCode != null) {
            stmt.bindString(7, kuquCode);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(8, barCode);
        }
 
        String assetNo = entity.getAssetNo();
        if (assetNo != null) {
            stmt.bindString(9, assetNo);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(10, state);
        }
 
        String stateCode = entity.getStateCode();
        if (stateCode != null) {
            stmt.bindString(11, stateCode);
        }
        stmt.bindLong(12, entity.getExsit() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LibAssetBean entity) {
        stmt.clearBindings();
 
        Long assetId = entity.getAssetId();
        if (assetId != null) {
            stmt.bindLong(1, assetId);
        }
 
        String danwei = entity.getDanwei();
        if (danwei != null) {
            stmt.bindString(2, danwei);
        }
 
        String danweiCode = entity.getDanweiCode();
        if (danweiCode != null) {
            stmt.bindString(3, danweiCode);
        }
 
        String kufang = entity.getKufang();
        if (kufang != null) {
            stmt.bindString(4, kufang);
        }
 
        String kufangCode = entity.getKufangCode();
        if (kufangCode != null) {
            stmt.bindString(5, kufangCode);
        }
 
        String kuqu = entity.getKuqu();
        if (kuqu != null) {
            stmt.bindString(6, kuqu);
        }
 
        String kuquCode = entity.getKuquCode();
        if (kuquCode != null) {
            stmt.bindString(7, kuquCode);
        }
 
        String barCode = entity.getBarCode();
        if (barCode != null) {
            stmt.bindString(8, barCode);
        }
 
        String assetNo = entity.getAssetNo();
        if (assetNo != null) {
            stmt.bindString(9, assetNo);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(10, state);
        }
 
        String stateCode = entity.getStateCode();
        if (stateCode != null) {
            stmt.bindString(11, stateCode);
        }
        stmt.bindLong(12, entity.getExsit() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LibAssetBean readEntity(Cursor cursor, int offset) {
        LibAssetBean entity = new LibAssetBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // assetId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // danwei
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // danweiCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // kufang
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // kufangCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // kuqu
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // kuquCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // barCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // assetNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // state
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // stateCode
            cursor.getShort(offset + 11) != 0 // exsit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LibAssetBean entity, int offset) {
        entity.setAssetId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDanwei(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDanweiCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKufang(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKufangCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKuqu(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKuquCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBarCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAssetNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setState(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStateCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setExsit(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LibAssetBean entity, long rowId) {
        entity.setAssetId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LibAssetBean entity) {
        if(entity != null) {
            return entity.getAssetId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LibAssetBean entity) {
        return entity.getAssetId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
